Transform: AWS::Serverless-2016-10-31
Parameters:
  ComposerRepositoryName:
    Description: The repository name to use with your ecr action.
    Type: String
  ComposerImageTag:
    Description: The image tag to use when building and deploying your Docker image.
    Type: String
    Default: latest

Resources:
  # ----- ECS -----
  ComposerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ComposerCluster
  ComposerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: ComposerContainer
          Image: !Join
            - ''
            - - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.
              - !Ref AWS::URLSuffix
              - !Sub /${ComposerRepositoryName}:${ComposerImageTag}
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/composer
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: CODESPACEDB_TABLE_NAME
              Value: !Ref CodespaceDB
            - Name: CODESPACEDB_TABLE_ARN
              Value: !GetAtt CodespaceDB.Arn
      ExecutionRoleArn: !GetAtt ComposerTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ComposerTaskExecutionRole.Arn
      Cpu: '1024'
      Memory: '3072'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
  ComposerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: S3PutObjectPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectTagging
                  - s3:PutObjectAcl
                Resource: !Sub ${Bucket.Arn}/*
        - PolicyName: AccessCodespaceDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                Resource:
                  - !GetAtt CodespaceDB.Arn
                  - !Sub ${CodespaceDB.Arn}/index/*
  ComposerTaskExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ComposerRepositoryName}
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: ComposerTaskExecutionRolePolicy
      Roles:
        - !Ref ComposerTaskExecutionRole
  ComposerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/composer
      RetentionInDays: 14
  # ^^^^^ ECS ^^^^^

  # ----- API -----
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NewCodespace.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CodespaceDetails.Arn}/invocations
              responses: {}
            post:
              responses:
                '200':
                  description: OK response
                '400':
                  description: Bad Request response
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiToCreateComposableRole.Arn
                httpMethod: POST
                type: aws
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartExecution
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.json('$'))
                        $util.toJson($inputRoot.body)

                    .*"status":\s*400.*:
                      statusCode: '400'
                      responseTemplates:
                        application/json: |
                          #set($inputRoot = $input.json('$'))
                          $util.toJson($inputRoot.body)

                requestTemplates:
                  application/json: !Sub |-
                    #set($allParams = $input.params())
                    {
                      "input": "$util.escapeJavaScript('{\
                        \"body\": $input.body,\
                        \"queryParams\": $util.toJson($allParams.querystring)\
                      }')",
                      "name": "$context.requestId",
                      "stateMachineArn": "${CreateComposable}"
                    }
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  # ^^^^^ API ^^^^^

  NewCodespace:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: NewCodespace
      CodeUri: ./lambda/NewCodespace
      Handler: bootstrap
      Runtime: provided.al2023
      MemorySize: 128
      Timeout: 5
      Tracing: Active
      Events:
        ApiPUT:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            RestApiId: !Ref Api
      Architectures:
        - arm64
      Environment:
        Variables:
          CODESPACEDB_TABLE_NAME: !Ref CodespaceDB
          CODESPACEDB_TABLE_ARN: !GetAtt CodespaceDB.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CodespaceDB
  NewCodespaceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${NewCodespace}

  CodespaceDetails:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CodespaceDetails
      CodeUri: lambda/CodespaceDetails
      Runtime: provided.al2023
      MemorySize: 128
      Timeout: 5
      Tracing: Active
      Architectures:
        - arm64
      Handler: bootstrap
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          CODESPACEDB_TABLE_NAME: !Ref CodespaceDB
          CODESPACEDB_TABLE_ARN: !GetAtt CodespaceDB.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CodespaceDB
  CodespaceDetailsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${CodespaceDetails}

  CreateComposable:
    Type: AWS::Serverless::StateMachine
    Properties:
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt CreateComposableLogGroup.Arn
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
            - Effect: Allow
              Action:
                - ecs:RunTask
              Resource: !Ref ComposerTaskDefinition
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt CodespaceDB.Arn
                - !Sub ${CodespaceDB.Arn}/index/*
      Tracing:
        Enabled: true
      Type: EXPRESS
      Events:
        ApiPOST:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref Api
      DefinitionSubstitutions:
        Bucket: !Ref Bucket
        ComposerCluster: !Ref ComposerCluster
        ComposerTaskDefinition: !Ref ComposerTaskDefinition
        CodespaceDBTableName: !Ref CodespaceDB
      DefinitionUri: state-machine/create-composable.asl.json
  CreateComposableLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/vendedlogs/states/${AWS::StackName}-${ResourceId}-Logs
        - ResourceId: CreateComposable
  ApiToCreateComposableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: !Sub apigateway.${AWS::URLSuffix}
      Policies:
        - PolicyName: ExecuteStateMachine
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt CreateComposable.Arn

  # ----- Other resources -----
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
  PublicBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${Bucket.Arn}/*
  CodespaceDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  # ^^^^^ Other resources ^^^^^